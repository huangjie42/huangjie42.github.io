(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{361:function(n,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",[n._v("运算符、变量、数据类型")])]),n._v(" "),e("h2",{attrs:{id:"_1-变量是什么？有什么用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量是什么？有什么用"}},[n._v("#")]),n._v(" 1 变量是什么？有什么用")]),n._v(" "),e("pre",[e("code",[n._v("变量就是内存中的一块临时空间，用来存储数据\n变量的声明（定义）\n\ta. 声明的时候没有赋初始值，默认输出的是undefined\n\tb. 可以同时声明多个，声明的时候可以赋值\n变量的命名规范：\n\t1 字母、下划线、数字组成，其他符号不允许使用\n\t2 不能以数字开头\n\t3 不能使用关键字，例如：var if else....function...\n\t4 变量名最好见词达意，身高--a  height  年龄 age --b\n\t5 用驼峰命名或者下划线命名 用户名 user_name , userName, fontSize\n\t6 不要用中文命名\n\t\n 强制记住，并且遵守\n")])]),n._v(" "),e("h2",{attrs:{id:"_2-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[n._v("#")]),n._v(" 2 数据类型")]),n._v(" "),e("pre",[e("code",[n._v("es5 es6 （javascript的语法规范） ---\x3e html4 html5\n当前用的版本es5\nNumber--数字类型-- 类名称（猫类 狗类）\nString--字符串类型\nBoolean-- 布尔类型  true  false\nnull --- 空  null\nundefined --- 为定义 undefined\nobject  --- 对象\n")])]),n._v(" "),e("h3",{attrs:{id:"_2-1-number-数字类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-number-数字类型"}},[n._v("#")]),n._v(" 2.1 Number-数字类型")]),n._v(" "),e("pre",[e("code",[n._v("注意：1 在数字类型中没有区分浮点类型（小数）和整数类型\n      2 浮点数不精确 在运算的时候要小心使用 \n")])]),n._v(" "),e("h3",{attrs:{id:"_2-2-string-字符串类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-string-字符串类型"}},[n._v("#")]),n._v(" 2.2 String-字符串类型")]),n._v(" "),e("pre",[e("code",[n._v("注意：1 单引号和双引号同时使用 需要嵌套\n      2 变量和字符串一起使用的时候 用 + 连接\n      3 字符串长度   字符串.length\n      4 空字符串  \"\" ''\n      5 空格不是空字符串\n")])]),n._v(" "),e("h3",{attrs:{id:"_2-3-boolean-布尔类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-boolean-布尔类型"}},[n._v("#")]),n._v(" 2.3 Boolean-布尔类型")]),n._v(" "),e("pre",[e("code",[n._v("注意：1 布尔类型只有两个值 true false\n")])]),n._v(" "),e("h3",{attrs:{id:"_2-4-null-和-undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-null-和-undefined"}},[n._v("#")]),n._v(" 2.4 null 和 undefined")]),n._v(" "),e("pre",[e("code",[n._v("null： 没有对象，此处不应该有值\nundefined：未定义，此处应该有值 只是没有给它\n注意：null用typeof打印出来的时候 是 object\n")])]),n._v(" "),e("h2",{attrs:{id:"_3-类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型转换"}},[n._v("#")]),n._v(" 3. 类型转换")]),n._v(" "),e("pre",[e("code",[n._v('转成数字类型：\n\t   parseInt  转换成整数  \n\t   parseFloat  转换成小数\n\t   规律：（11abc.234）从左往右读取里面的每个字符，遇到不是数字的字符就连同当前字符和后面的字符都扔掉   \n   NaN: 不是一个数字，从左往右读发现没有一个是我想要的，这个时候你需要告诉别人转换的结果不是一个数字了\n   Number: 里面只能是数字字符 不能有其他 否则转换的结果就是NaN\n转成字符串： String\n转成布尔类型： Boolean\n   注意：转换成false的情况： 0 -0 "" null undefined NaN\n   转成false的情况必须记住\n')])]),n._v(" "),e("h2",{attrs:{id:"_4-运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-运算符"}},[n._v("#")]),n._v(" 4. 运算符")]),n._v(" "),e("pre",[e("code",[n._v('a. ++ -- 自增自减运算\nb. 表达式1？语句1:语句2  当表达式1为true  执行语句1  表达式1为false 执行语句2\nc.逻辑运算符：\n\t&&  并且的意思，必须两边同时满足 结果才为true\n\t||  或者的意思，两边只需要满足一个就行 结果就会是true\n\t！  取反的意思， 原来是true 变成false 原来是false 变成true\t\n\t\n\t总结：&& 有假为假  || 有真为真\n\t\t 逻辑运算符有短路的问题\n d.赋值运算符\n \ta += 10   => a = a + 10\n \ta *= 10   => a = a * 10\n e.字符串连接符号  \n + 当两边有一个是字符串的时候，这个+就是字符串连接符号\n 可以把变量和字符串连接起来  "<div>"+num+"</div>"\n \n f.运算符的优先级\n \t赋值运算符 优先级最低\n \t（）优先级最高\n')])]),n._v(" "),e("p",[n._v("运算符、变量、数据类型")]),n._v(" "),e("p",[n._v("语言是相通--\x3e基础语法基本上都一样")])])}),[],!1,null,null,null);t.default=r.exports}}]);